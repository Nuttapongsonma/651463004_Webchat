'use client'
import { useState } from 'react';
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { SmilePlus, Loader2, AlertTriangle } from "lucide-react";
import axios from 'axios';

const EMOJI_MAP = {
  "0": { 
    emoji: "üòä", 
    name: "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç",
    options: ['üôÇ','üòÑ','üòÅ','üòÜ','üòÄ','üòä','üòÉ']
  },
  "1": { 
    emoji: "üò¢", 
    name: "‡πÄ‡∏®‡∏£‡πâ‡∏≤",
    options: ['üò¢','üò•','üò∞','üòì','üôÅ','üòü','üòû','üòî','üò£','üò´','üò©']
  },
  "2": { 
    emoji: "üò°", 
    name: "‡πÇ‡∏Å‡∏£‡∏ò",
    options: ['üò°','üò†','üò§','üòñ']
  },
  "3": { 
    emoji: "üôÑ", 
    name: "‡πÄ‡∏ö‡∏∑‡πà‡∏≠",
    options: ['üôÑ','üòí','üòë','üòï']
  },
  "4": { 
    emoji: "üò±", 
    name: "‡∏ï‡∏Å‡πÉ‡∏à‡∏°‡∏≤‡∏Å",
    options: ['üò±']
  },
  "5": { 
    emoji: "üò®", 
    name: "‡∏Å‡∏•‡∏±‡∏ß",
    options: ['üò®','üòß','üò¶']
  },
  "6": { 
    emoji: "üòÆ", 
    name: "‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î‡πÉ‡∏à",
    options: ['üòÆ','üò≤','üòØ']
  },
  "7": { 
    emoji: "üò¥", 
    name: "‡∏á‡πà‡∏ß‡∏á",
    options: ['üò¥','üò™']
  },
  "8": { 
    emoji: "üòã", 
    name: "‡∏≠‡∏£‡πà‡∏≠‡∏¢",
    options: ['üòã','üòú','üòù','üòõ']
  },
  "9": { 
    emoji: "üòç", 
    name: "‡∏£‡∏±‡∏Å",
    options: ['üòç','üíï','üòò','üòö','üòô','üòó']
  },
  "10": { 
    emoji: "üòå", 
    name: "‡πÇ‡∏•‡πà‡∏á‡πÉ‡∏à",
    options: ['üòå']
  },
  "11": { 
    emoji: "üòê", 
    name: "‡πÄ‡∏â‡∏¢‡πÜ",
    options: ['üòê']
  },
  "12": { 
    emoji: "üò∑", 
    name: "‡∏õ‡πà‡∏ß‡∏¢",
    options: ['üò∑']
  },
  "13": { 
    emoji: "üò≥", 
    name: "‡∏ï‡∏Å‡πÉ‡∏à",
    options: ['üò≥']
  },
  "14": { 
    emoji: "üòµ", 
    name: "‡∏°‡∏∂‡∏ô",
    options: ['üòµ']
  },
  "15": { 
    emoji: "üíî", 
    name: "‡∏≠‡∏Å‡∏´‡∏±‡∏Å",
    options: ['üíî']
  },
  "16": { 
    emoji: "üòé", 
    name: "‡πÄ‡∏ó‡πà",
    options: ['üòé','üòà']
  },
  "17": { 
    emoji: "üôÉ", 
    name: "‡∏Å‡∏ß‡∏ô",
    options: ['üôÉ','üòè','üòÇ','üò≠']
  },
  "18": { 
    emoji: "üò¨", 
    name: "‡πÄ‡∏Ç‡∏¥‡∏ô",
    options: ['üò¨','üòÖ','üò∂']
  },
  "19": { 
    emoji: "üòâ", 
    name: "‡∏Ç‡∏¢‡∏¥‡∏ö‡∏ï‡∏≤",
    options: ['üòâ']
  },
  "20": { 
    emoji: "üíñ", 
    name: "‡∏´‡∏±‡∏ß‡πÉ‡∏à",
    options: ['üíñ','üíô','üíö','üíó','üíì','üíú','üíò','üíõ']
  },
  "21": { 
    emoji: "üòá", 
    name: "‡∏ó‡∏≥‡∏î‡∏µ",
    options: ['üòá']
  },
    "22": { 
    emoji: "üê±", 
    name: "‡πÅ‡∏°‡∏ß",
    options: ['üê±','üò∫','üò∏','üòπ','üòª','üòΩ','üêà']
  },
    "23": { 
    emoji: "üê∂", 
    name: "‡∏´‡∏°‡∏≤",
    options: ['üê∂','üêï','ü¶Æ','üê©','üêæ']
  },
    "24": { 
    emoji: "üê∞", 
    name: "‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢",
    options: ['üê∞','üêá','ü¶ä']
  },
    "25": { 
    emoji: "üêº", 
    name: "‡πÅ‡∏û‡∏ô‡∏î‡πâ‡∏≤",
    options: ['üêº','üê®','üß∏']
  },
    "26": { 
    emoji: "ü¶Å", 
    name: "‡∏™‡∏¥‡∏á‡πÇ‡∏ï",
    options: ['ü¶Å','üêØ','üêÖ']
  },
    "27": { 
    emoji: "üê∑", 
    name: "‡∏´‡∏°‡∏π",
    options: ['üê∑','üêΩ','üêñ']
  },
    "28": { 
    emoji: "üê∏", 
    name: "‡∏Å‡∏ö",
    options: ['üê∏','üêä','ü¶é']
  },
    "29": { 
    emoji: "ü¶ã", 
    name: "‡∏ú‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠",
    options: ['ü¶ã','üêõ','üêù']
  },
    "30": { 
    emoji: "üå∫", 
    name: "‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ",
    options: ['üå∫','üå∏','üåπ','üå∑','üåº','üíê']
  },
    "31": { 
    emoji: "üåà", 
    name: "‡∏£‡∏∏‡πâ‡∏á",
    options: ['üåà','‚òÄÔ∏è','‚≠ê','‚ú®']
  },
    "32": { 
    emoji: "üéÄ", 
    name: "‡πÇ‡∏ö‡∏ß‡πå",
    options: ['üéÄ','üéà','üéâ','üéä']
  },
    "33": { 
      emoji: "üêî", 
      name: "‡πÑ‡∏Å‡πà",
      options: ['üêî','üêì','üê§','üê•','üê£']
  }
};

export default function Thaimoji() {
  const [text, setText] = useState('');
  const [results, setResults] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const getRandomEmoji = (category) => {
    const emojiSet = EMOJI_MAP[category]?.options;
    if (!emojiSet || emojiSet.length === 0) return EMOJI_MAP[category]?.emoji || "‚ùì";
    return emojiSet[Math.floor(Math.random() * emojiSet.length)];
  };

  const analyzeText = async (e) => {
    e.preventDefault();
    if (!text.trim() || isLoading) return;

    setIsLoading(true);
    setError(null);

    try {
      const response = await axios.get('/api/thaimoji', {
        params: { text: text.trim() }
      });

      if (response.data && !response.data.error) {
        const sortedResults = Object.entries(response.data)
          .map(([key, score]) => ({
            emoji: getRandomEmoji(key),
            name: EMOJI_MAP[key]?.name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
            score: Math.min(Math.max(score * 100, 0), 100), // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-100
            category: key
          }))
          .sort((a, b) => b.score - a.score)
          .filter(result => result.score > 10); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥

        setResults(sortedResults);

        if (sortedResults.length === 0) {
          setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ');
        }
      } else {
        throw new Error(response.data?.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ');
      }
    } catch (err) {
      setError(err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå');
    } finally {
      setIsLoading(false);
    }
  };

  const getContextWeight = (category, text) => {
    const contextMap = {
      "2": ["‡∏£‡∏±‡∏Å", "‡∏ä‡∏≠‡∏ö", "‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á", "‡∏´‡∏•‡∏á‡∏£‡∏±‡∏Å"], // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å
      "1": ["‡∏Ç‡∏≥", "‡∏Æ‡∏≤", "555", "‡∏ï‡∏•‡∏Å"], // ‡∏Ç‡∏≥‡∏Ç‡∏±‡∏ô
      "4": ["‡πÇ‡∏Å‡∏£‡∏ò", "‡πÇ‡∏°‡πÇ‡∏´", "‡πÄ‡∏Å‡∏•‡∏µ‡∏¢‡∏î"], // ‡πÇ‡∏Å‡∏£‡∏ò
      "3": ["‡πÄ‡∏®‡∏£‡πâ‡∏≤", "‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à", "‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ"], // ‡πÄ‡∏®‡∏£‡πâ‡∏≤
      "20": ["‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì", "‡∏Ç‡∏≠‡∏ö‡πÉ‡∏à", "‡∏Ç‡∏≠‡∏ö‡∏û‡∏£‡∏∞‡∏Ñ‡∏∏‡∏ì"], // ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì
      "22": ["‡πÅ‡∏°‡∏ß", "‡πÄ‡∏´‡∏°‡∏µ‡∏¢‡∏ß", "‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏µ‡∏¢‡∏ß", "meow"],
      "23": ["‡∏´‡∏°‡∏≤", "‡∏™‡∏∏‡∏ô‡∏±‡∏Ç", "‡∏ô‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏≤", "‡πÇ‡∏Æ‡πà‡∏á", "‡∏û‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡πâ‡∏•"],
      "24": ["‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢", "‡∏ö‡∏±‡∏ô‡∏ô‡∏µ‡πà", "‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏¢"],
      "25": ["‡πÅ‡∏û‡∏ô‡∏î‡πâ‡∏≤", "‡∏´‡∏°‡∏µ‡πÅ‡∏û‡∏ô‡∏î‡πâ‡∏≤", "‡πÇ‡∏Ñ‡∏≠‡∏≤‡∏•‡πà‡∏≤"],
      "26": ["‡∏™‡∏¥‡∏á‡πÇ‡∏ï", "‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏´‡πå", "‡πÄ‡∏™‡∏∑‡∏≠", "‡πÄ‡∏à‡πâ‡∏≤‡∏õ‡πà‡∏≤"],
      "27": ["‡∏´‡∏°‡∏π", "‡∏û‡∏¥‡∏Å‡πÄ‡∏•‡πá‡∏ï", "‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏π"],
      "28": ["‡∏Å‡∏ö", "‡∏≠‡∏∂‡πà‡∏á‡∏≠‡πà‡∏≤‡∏á", "‡∏Ñ‡∏≤‡∏á‡∏Ñ‡∏Å"],
      "29": ["‡∏ú‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠", "‡πÅ‡∏°‡∏•‡∏á", "‡∏´‡∏ô‡∏≠‡∏ô"],
      "30": ["‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ", "‡∏Å‡∏∏‡∏´‡∏•‡∏≤‡∏ö", "‡∏ó‡∏¥‡∏ß‡∏•‡∏¥‡∏õ", "‡∏ä‡πà‡∏≠‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ"],
      "31": ["‡∏£‡∏∏‡πâ‡∏á", "‡∏™‡∏î‡πÉ‡∏™", "‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î", "‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß"],
      "32": ["‡πÇ‡∏ö‡∏ß‡πå", "‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç", "‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", "‡∏â‡∏•‡∏≠‡∏á"],
      "33": ["‡πÑ‡∏Å‡πà", "‡πÄ‡∏à‡πâ‡∏≤‡πÑ‡∏Å‡πà", "‡∏•‡∏π‡∏Å‡πÑ‡∏Å‡πà", "‡πÅ‡∏°‡πà‡πÑ‡∏Å‡πà", "‡πÑ‡∏Å‡πà‡∏¢‡πà‡∏≤‡∏á", "‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î", "‡∏Å‡∏∏‡πä‡∏Å‡πÜ"]
    };

    if (contextMap[category]?.some(keyword => text.includes(keyword))) {
      return 1.5;
    }
    return 1;
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      analyzeText(e);
    }
  };

  return (
    <div className="min-h-screen bg-white py-8">
      <div className="container mx-auto px-4 max-w-4xl">
        <Card className="bg-white shadow-xl rounded-2xl overflow-hidden border-t-4 border-blue-500">
          <CardContent className="p-8">
            <div className="text-center mb-8">
              <h1 className="text-3xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
                <SmilePlus className="w-10 h-10 text-blue-500" />
                ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥
              </h1>
              <p className="text-gray-600">
                ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
              </p>
            </div>

            <div className="space-y-6">
              <div className="space-y-2">
                <div className="relative">
                  <textarea
                    value={text}
                    onChange={(e) => setText(e.target.value)}
                    onKeyDown={handleKeyDown}
                    className="w-full p-4 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all resize-none"
                    rows="5"
                    maxLength="500"
                    placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå..."
                    required
                  />
                  <p className="text-sm text-gray-500 text-right mt-1">
                    {text.length}/500 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                  </p>
                </div>

                <Button
                  onClick={analyzeText}
                  disabled={isLoading || !text.trim()}
                  className="w-full bg-blue-600 hover:bg-blue-700 text-white py-6 text-lg"
                >
                  {isLoading ? (
                    <>
                      <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                      ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...
                    </>
                  ) : (
                    <>
                      <SmilePlus className="w-5 h-5 mr-2" />
                      ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥
                    </>
                  )}
                </Button>
              </div>

              {error && (
                <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg">
                  <div className="flex items-center">
                    <AlertTriangle className="h-5 w-5 text-red-500 mr-3" />
                    <p className="text-sm text-red-700">{error}</p>
                  </div>
                </div>
              )}

              {results && results.length > 0 && (
                <div className="space-y-6 animate-fade-in">
                  <div className="flex items-center gap-2 mb-4">
                    <h2 className="text-xl font-bold text-gray-800">‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h2>
                    <div className="h-px flex-1 bg-gray-200"></div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {results.slice(0, 6).map((result, index) => (
                      <div
                        key={index}
                        className="bg-white p-4 rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-shadow"
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <span className="text-4xl">{result.emoji}</span>
                            <span className="text-gray-600">{result.name}</span>
                          </div>
                          <div className="text-right">
                            <div className="text-lg font-semibold text-blue-600">
                              {result.score.toFixed(1)}%
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
